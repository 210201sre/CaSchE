pipeline {
//   agent any
    agent {
        kubernetes {
                //label 'build-agent'
            inheritFrom 'build-agent'
            defaultContainer 'jnlp'
            yaml """
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                component: ci
            spec:
              containers:
              - name: jnlp
                image: odavid/jenkins-jnlp-slave:latest
                workingDir: /home/jenkins
                env:
                - name: DOCKER_HOST
                  value: tcp://localhost:2375
                resources:
                  requests:
                    memory: "500Mi"
                    cpu: "0.3"
                  limits:
                    memory: "1600Mi"
                    cpu: "0.5"
              - name: dind-daemon
                image: docker:18-dind
                workingDir: /var/lib/docker
                securityContext:
                  privileged: true
                volumeMounts:
                - name: docker-storage
                  mountPath: /var/lib/docker
                resources:
                  requests:
                    memory: "300Mi"
                    cpu: "0.3"
                  limits:
                    memory: "500Mi"
                    cpu: "0.5"
              - name: kubectl
                image: jshimko/kube-tools-aws:latest
                command:
                - cat
                tty: true
              volumes:
              - name: docker-storage
                emptyDir: {}
            """
        }
    }

    environment {
        DOCKER_IMAGE_NAME = "sentrurion/casche-project-two"
        MAVEN_IMAGE_NAME = "casche-project-two"
    }

    stages {
        stage('Build') {
            steps {
                dir("Project2") {
                    //sh 'ls'
                    //sh 'echo "========================================================================"'
                    sh 'java -version'
                    //sh 'yum install docker -y'
                    sh 'chmod +x mvnw && ./mvnw clean package'
                    sh 'docker build -t sentrurion/casche-project-two .'
                    //sh 'echo other shell commands'
                    script {
                        app = docker.image(DOCKER_IMAGE_NAME)
                    }
                }
            }
        }

        stage('Sonar Quality Analysis') {
            tools {
                jdk "jdk11"
            }
            steps {
                dir("Project2") {
                    withSonarQubeEnv(credentialsId: 'sonar-token-2', installationName: 'sonarcloud') {
                        sh './mvnw -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar'
                    }
                }
            }
        }

        stage('Wait for Quality Analysis') {
            steps {
                script {
                    timeout(time: 30, unit: 'MINUTES') {
                        qualitygate = waitForQualityGate abortPipeline: true
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    docker.withRegistry('https://registry.hub.docker.com', 'casche-dj-token') {
                        app.push("latest") //image tags
                        app.push("${env.BUILD_NUMBER}")
                        //app.push("$env.GIT_COMMIT}") // this format does not seem to be acceptable by dockerhub (too long?)
                    }
                }
            }
        }

        stage('Canary Deployment') {
            environment {
                CANARY_REPLICAS = 1
            }
            steps {
                script {
                    container('kubectl') {
                        withKubeConfig([credentialsId: 'kubeconfig']) {
                            sh "aws eks update-kubeconfig --name matt-oberlies-sre-943"
                            sh "kubectl apply -n casche -f canary-p2.yml"
                            sh "kubectl set -n casche image deployment/project-two-canary project-two=$DOCKER_IMAGE_NAME:$BUILD_NUMBER"
                            sh "kubectl scale -n casche deployment.v1.apps/project-two-canary --replicas=$CANARY_REPLICAS"
                        }
                    }
                }
            }
        }

        stage('Production Deployment') {
            environment {
                CANARY_REPLICAS = 0
            }
            steps {
                script {
                    withKubeConfig([credentialsId: 'kubeconfig']) {
                        sh "aws eks update-kubeconfig --name matt-oberlies-sre-943"
                        input 'Deploy to Production?'

                        sh "kubectl scale -n casche deployment.v1.apps/project-two-canary --replicas=$CANARY_REPLICAS"
                        sh "kubectl set -n casche image deployment/project-two project-two=$DOCKER_IMAGE_NAME:$BUILD_NUMBER"
                    }
                }
            }
        }
    }
}
